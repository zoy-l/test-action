name: Test-Release

on:
  push:
    branches:
      - test-github

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            tauri_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust_target: aarch64-apple-darwin
            tauri_target: universal-apple-darwin
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            tauri_target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: zoy-l/shibei-desktop
          ref: test-github
          token: ${{ secrets.ACB }}

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18

      - name: 'Setup Rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.rust_target }}

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install dependencies (ubuntu only)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup install
        run: pnpm install --frozen-lockfile

      - uses: zoy-l/tauri-build-action@main
        id: tauri_build
        env:
          ENV_API_URL: https://test-api.shibei.chat
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ''
        with:
          target: ${{ matrix.platform.tauri_target }}

      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: "${{ join(fromJSON(steps.tauri_build.outputs.artifacts), '\n') }}"

  publish:
    permissions:
      contents: write

    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18

      - uses: actions/download-artifact@v3
        id: download
        with:
          name: artifacts
          path: artifacts

      - name: Read package.json and Extract Version
        id: extract-version
        run: |
          VERSION=$(node -p -e "require('./package.json').version")
          echo "::set-output name=version::$VERSION"
        working-directory: ${{ github.workspace }}

      - name: Generate Timer
        id: current-time
        run: echo "::set-output name=current-time::$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"

      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::shibei_$(date +"%Y.%m.%d_%H-%M")"

      - name: Cat Signature Contents
        id: sig-contents
        run: |
          MSI_SIG_CONTENT="$(cat ./artifacts/*.msi.zip.sig 2>/dev/null || echo '')"
          APP_SIG_CONTENT="$(cat ./artifacts/*.app.tar.gz.sig 2>/dev/null || echo '')"
          APPIMAGE_SIG_CONTENT="$(cat ./artifacts/*.AppImage.tar.gz.sig 2>/dev/null || echo '')"

          echo "::set-output name=msi-sig-content::$MSI_SIG_CONTENT"
          echo "::set-output name=app-sig-content::$APP_SIG_CONTENT"
          echo "::set-output name=appimage-sig-content::$APPIMAGE_SIG_CONTENT"
        working-directory: ${{ github.workspace }}

      - name: Generate Install JSON File
        run: |
          echo '{
            "version": "${{ steps.extract-version.outputs.version }}",
            "notes": "发现新版本",
            "pub_date": "${{ steps.current-time.outputs.current-time }}",
            "platforms": {
              "darwin-x86_64": {
                "signature": "${{ steps.sig-contents.outputs.app-sig-content }}",
                "url": "https://shibei-file.oss-cn-hangzhou.aliyuncs.com/tauri/${{ steps.extract-version.outputs.version }}/shibei.app.tar.gz"
              },
              "darwin-aarch64": {
                "signature": "${{ steps.sig-contents.outputs.app-sig-content }}",
                "url": "https://shibei-file.oss-cn-hangzhou.aliyuncs.com/tauri/${{ steps.extract-version.outputs.version }}/shibei.app.tar.gz"
              },
              "linux-x86_64": {
                "signature": "${{ steps.sig-contents.outputs.appimage-sig-content }}",
                "url": "https://shibei-file.oss-cn-hangzhou.aliyuncs.com/tauri/${{ steps.extract-version.outputs.version }}/shibei_${{ steps.extract-version.outputs.version }}_amd64.AppImage.tar.gz"
              },
              "windows-x86_64": {
                "signature": "${{ steps.sig-contents.outputs.msi-sig-content }}",
                "url": "https://shibei-file.oss-cn-hangzhou.aliyuncs.com/tauri/${{ steps.extract-version.outputs.version }}/shibei_${{ steps.extract-version.outputs.version }}_x64_en-US.msi.zip
                "
              }
            }
          }' > ./artifacts/install.json
        working-directory: ${{ github.workspace }}

      - name: Archive Artifacts
        run: |
          mkdir -p ./artifacts/${{ steps.extract-version.outputs.version }}
          mv ./artifacts/**/* ./artifacts/${{ steps.extract-version.outputs.version }}/
          zip -r bundles.zip ./artifacts/${{ steps.extract-version.outputs.version }}
          mv ./bundles.zip ./artifacts/${{ steps.extract-version.outputs.version }}/bundles.zip
        working-directory: ${{ github.workspace }}

      - name: 'create release'
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          draft: false
          files: ./artifacts/**/*
